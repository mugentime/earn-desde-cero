<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Binance Wallet Balance</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <style>
        body {
            background: linear-gradient(135deg, #0f172a 0%, #1e3a8a 50%, #0f172a 100%);
            min-height: 100vh;
        }
        .card {
            backdrop-filter: blur(10px);
            background: rgba(30, 41, 59, 0.8);
            border: 1px solid rgba(71, 85, 105, 0.3);
        }
        .loading-spinner {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        .balance-card {
            background: linear-gradient(135deg, #2563eb 0%, #7c3aed 100%);
        }
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
        .status-connected {
            background-color: #10b981;
            box-shadow: 0 0 6px rgba(16, 185, 129, 0.6);
        }
        .status-disconnected {
            background-color: #ef4444;
            box-shadow: 0 0 6px rgba(239, 68, 68, 0.6);
        }
    </style>
</head>
<body class="p-4">
    <div class="max-w-md mx-auto">
        <!-- Header -->
        <div class="text-center mb-8 pt-8">
            <div class="flex items-center justify-center mb-4">
                <i data-lucide="wallet" class="w-8 h-8 text-blue-400 mr-2"></i>
                <h1 class="text-2xl font-bold text-white">Trading Wallet</h1>
            </div>
            <p class="text-gray-400">Real-time balance tracking</p>
        </div>

        <!-- Connection Status -->
        <div class="card rounded-xl p-4 mb-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i data-lucide="server" class="w-5 h-5 text-gray-400 mr-2"></i>
                    <span class="text-white font-medium">Server Status</span>
                </div>
                <div id="connection-status" class="flex items-center text-red-400">
                    <div class="status-dot status-disconnected mr-2"></div>
                    <span class="text-sm font-medium">Connecting...</span>
                </div>
            </div>
            
            <div id="connection-error" class="mt-3 p-3 bg-red-900 bg-opacity-30 border border-red-700 rounded-lg hidden">
                <p class="text-red-300 text-sm">
                    Connection error. Please check your network.
                </p>
            </div>
        </div>

        <!-- Balance Display -->
        <div id="balance-section" class="hidden">
            <div class="card rounded-xl p-6">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-semibold text-white">Account Balance</h2>
                    <div class="flex items-center space-x-2">
                        <button id="toggle-balance" class="text-gray-400 hover:text-white transition-colors">
                            <i data-lucide="eye" class="w-5 h-5"></i>
                        </button>
                        <button id="refresh-balance" class="text-blue-400 hover:text-blue-300 transition-colors">
                            <i data-lucide="refresh-cw" class="w-5 h-5"></i>
                        </button>
                    </div>
                </div>

                <!-- Error Display -->
                <div id="error-display" class="bg-red-900 bg-opacity-30 border border-red-700 rounded-lg p-4 mb-4 hidden">
                    <p class="text-red-300 text-sm" id="error-message"></p>
                </div>

                <!-- Loading State -->
                <div id="loading-state" class="text-center py-8 hidden">
                    <i data-lucide="refresh-cw" class="w-8 h-8 text-blue-400 loading-spinner mx-auto mb-2"></i>
                    <p class="text-gray-400">Fetching balance...</p>
                </div>

                <!-- Balance Content -->
                <div id="balance-content" class="space-y-4 hidden">
                    <!-- Total Balance -->
                    <div class="balance-card rounded-lg p-4">
                        <div class="text-blue-100 text-sm font-medium">Total Balance</div>
                        <div class="text-white text-3xl font-bold" id="total-balance">
                            $0.00
                        </div>
                        <div class="text-blue-200 text-sm mt-1" id="btc-equivalent">
                            â‰ˆ 0.00000000 BTC
                        </div>
                    </div>

                    <!-- Balance Breakdown -->
                    <div class="grid grid-cols-2 gap-4">
                        <div class="card rounded-lg p-4">
                            <div class="text-gray-400 text-sm">Available</div>
                            <div class="text-white text-lg font-semibold" id="available-balance">
                                $0.00
                            </div>
                        </div>
                        
                        <div class="card rounded-lg p-4">
                            <div class="text-gray-400 text-sm">In Orders</div>
                            <div class="text-white text-lg font-semibold" id="orders-balance">
                                $0.00
                            </div>
                        </div>
                    </div>

                    <!-- Assets Breakdown -->
                    <div id="assets-section" class="hidden">
                        <div class="card rounded-lg p-4">
                            <div class="text-gray-400 text-sm mb-3">Top Assets</div>
                            <div id="assets-list" class="space-y-2">
                                <!-- Assets will be populated here -->
                            </div>
                        </div>
                    </div>

                    <!-- Last Updated -->
                    <div class="text-center text-gray-400 text-sm" id="last-updated">
                        Click refresh to load balance
                    </div>
                </div>
            </div>
        </div>

        <!-- API Info -->
        <div class="card rounded-xl p-6 mt-6">
            <h3 class="text-white font-semibold mb-3 flex items-center">
                <i data-lucide="info" class="w-5 h-5 mr-2"></i>
                API Information
            </h3>
            <div class="text-gray-300 text-sm space-y-2">
                <div class="flex justify-between">
                    <span>Health Check:</span>
                    <span class="text-blue-400">/api/health</span>
                </div>
                <div class="flex justify-between">
                    <span>Wallet Balance:</span>
                    <span class="text-blue-400">/api/wallet/balance</span>
                </div>
                <div class="flex justify-between">
                    <span>Open Orders:</span>
                    <span class="text-blue-400">/api/wallet/orders</span>
                </div>
                <div class="flex justify-between">
                    <span>Trading Fees:</span>
                    <span class="text-blue-400">/api/wallet/fees</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Application state
        let isConnected = false;
        let showBalance = true;
        let balanceData = null;

        // DOM elements
        const connectionStatus = document.getElementById('connection-status');
        const connectionError = document.getElementById('connection-error');
        const balanceSection = document.getElementById('balance-section');
        const errorDisplay = document.getElementById('error-display');
        const errorMessage = document.getElementById('error-message');
        const loadingState = document.getElementById('loading-state');
        const balanceContent = document.getElementById('balance-content');
        const refreshButton = document.getElementById('refresh-balance');
        const toggleButton = document.getElementById('toggle-balance');

        // Initialize Lucide icons
        lucide.createIcons();

        // Check server connection
        async function checkConnection() {
            try {
                const response = await fetch('/api/health');
                if (response.ok) {
                    setConnected(true);
                    const data = await response.json();
                    console.log('Health check:', data);
                } else {
                    setConnected(false);
                }
            } catch (error) {
                console.error('Connection error:', error);
                setConnected(false);
            }
        }

        // Set connection status
        function setConnected(connected) {
            isConnected = connected;
            
            if (connected) {
                connectionStatus.innerHTML = `
                    <div class="status-dot status-connected mr-2"></div>
                    <span class="text-sm font-medium text-green-400">Connected</span>
                `;
                connectionError.classList.add('hidden');
                balanceSection.classList.remove('hidden');
            } else {
                connectionStatus.innerHTML = `
                    <div class="status-dot status-disconnected mr-2"></div>
                    <span class="text-sm font-medium text-red-400">Disconnected</span>
                `;
                connectionError.classList.remove('hidden');
                balanceSection.classList.add('hidden');
            }
        }

        // Fetch wallet balance
        async function fetchBalance() {
            if (!isConnected) {
                showError('Not connected to server');
                return;
            }

            showLoading(true);
            hideError();

            try {
                const response = await fetch('/api/wallet/balance');
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `HTTP ${response.status}`);
                }

                const data = await response.json();
                balanceData = data;
                displayBalance(data);
                updateLastUpdated();
                
            } catch (error) {
                console.error('Balance fetch error:', error);
                showError(error.message || 'Failed to fetch balance');
            } finally {
                showLoading(false);
            }
        }

        // Display balance data
        function displayBalance(data) {
            // Update total balance
            document.getElementById('total-balance').textContent = formatCurrency(data.total, data.currency);
            
            // Update BTC equivalent
            if (data.btcValue) {
                document.getElementById('btc-equivalent').textContent = `â‰ˆ ${data.btcValue} BTC`;
            }

            // Update available and orders
            document.getElementById('available-balance').textContent = formatCurrency(data.available, data.currency);
            document.getElementById('orders-balance').textContent = formatCurrency(data.inOrders || 0, data.currency);

            // Display top assets
            if (data.balances && data.balances.length > 0) {
                displayAssets(data.balances);
            }

            balanceContent.classList.remove('hidden');
        }

        // Display assets breakdown
        function displayAssets(balances) {
            const assetsList = document.getElementById('assets-list');
            const topAssets = balances
                .filter(asset => asset.usdtValue > 1) // Only show assets worth more than $1
                .sort((a, b) => b.usdtValue - a.usdtValue)
                .slice(0, 5); // Top 5 assets

            if (topAssets.length > 0) {
                assetsList.innerHTML = topAssets.map(asset => `
                    <div class="flex justify-between items-center">
                        <div>
                            <span class="text-white font-medium">${asset.asset}</span>
                            <div class="text-gray-400 text-xs">${asset.total.toFixed(8)}</div>
                        </div>
                        <div class="text-right">
                            <div class="text-white">${formatCurrency(asset.usdtValue, 'USD')}</div>
                        </div>
                    </div>
                `).join('');
                
                document.getElementById('assets-section').classList.remove('hidden');
            }
        }

        // Format currency
        function formatCurrency(amount, currency = 'USD') {
            if (!showBalance) return 'â€¢â€¢â€¢â€¢â€¢â€¢';
            
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: currency === 'USDT' ? 'USD' : currency,
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(amount);
        }

        // Show/hide loading state
        function showLoading(show) {
            if (show) {
                loadingState.classList.remove('hidden');
                balanceContent.classList.add('hidden');
                refreshButton.querySelector('i').classList.add('loading-spinner');
            } else {
                loadingState.classList.add('hidden');
                refreshButton.querySelector('i').classList.remove('loading-spinner');
            }
        }

        // Show error
        function showError(message) {
            errorMessage.textContent = message;
            errorDisplay.classList.remove('hidden');
            balanceContent.classList.add('hidden');
        }

        // Hide error
        function hideError() {
            errorDisplay.classList.add('hidden');
        }

        // Update last updated time
        function updateLastUpdated() {
            const now = new Date().toLocaleTimeString();
            document.getElementById('last-updated').textContent = `Last updated: ${now}`;
        }

        // Toggle balance visibility
        function toggleBalanceVisibility() {
            showBalance = !showBalance;
            const icon = toggleButton.querySelector('i');
            
            if (showBalance) {
                icon.setAttribute('data-lucide', 'eye');
            } else {
                icon.setAttribute('data-lucide', 'eye-off');
            }
            
            lucide.createIcons();
            
            // Refresh display if we have data
            if (balanceData) {
                displayBalance(balanceData);
            }
        }

        // Event listeners
        refreshButton.addEventListener('click', fetchBalance);
        toggleButton.addEventListener('click', toggleBalanceVisibility);

        // Initialize app
        async function init() {
            console.log('ðŸš€ Initializing Binance Wallet App...');
            await checkConnection();
            
            // Auto-refresh every 30 seconds if connected
            setInterval(() => {
                if (isConnected) {
                    checkConnection();
                }
            }, 30000);
        }

        // Start the app
        init();
    </script>
</body>
</html>